#!/usr/bin/env python3
"""danielsinkin97@gmail.com"""

import argparse
import os
import pkgutil
import sys

START_MARKER = "# BEGIN AUTOGENERATED IMPORTS"
END_MARKER = "# END AUTOGENERATED IMPORTS"

# BEGIN AUTOGENERATED IMPORTS
# END AUTOGENERATED IMPORTS


def update_imports_if_needed() -> bool:
    """
    Scans the 'examples' package for modules whose names start with "example_"
    and checks the current script's autogenerated imports block.
    If there is a mismatch it updates the block and returns True.
    """
    try:
        import examples  # pylint: disable=import-outside-toplevel
    except ImportError:
        print("Unable to import the 'examples' package.")
        return False

    # Get all modules in the examples folder that match our naming.
    example_modules = []
    for _, name, _ in pkgutil.iter_modules(examples.__path__):
        if name.startswith("example_"):
            example_modules.append(name)
    example_modules.sort()

    # Generate the new import lines following the pattern:
    # from examples.<module> import <module>
    generated_import_lines = []
    for mod in example_modules:
        generated_import_lines.append(f"from examples.{mod} import {mod}")

    # Read the current file content.
    filename = __file__
    with open(filename, "r", encoding="utf-8") as f:
        lines = f.readlines()

    start_idx = None
    end_idx = None
    for i, line in enumerate(lines):
        if line == START_MARKER:
            start_idx = i
        elif line == END_MARKER:
            end_idx = i
            break

    if start_idx is None or end_idx is None:
        print("Markers not found in file. Cannot auto-update imports.")
        return False

    # Build the new import block (ensure each line ends with a newline).
    new_block = (
        [START_MARKER] + [line + "\n" for line in generated_import_lines] + [END_MARKER]
    )
    current_block = lines[start_idx : end_idx + 1]

    # If there is any discrepancy update the file.
    if current_block != new_block:
        new_lines = lines[:start_idx] + new_block + lines[end_idx + 1 :]
        with open(filename, "w", encoding="utf-8") as f:
            f.writelines(new_lines)
        print("Updated import statements in the script. Restarting...")
        return True

    return False


def run_examples(show: bool = True) -> None:
    """
    Iterates through the globals to find and run all functions whose names start with "example_".
    """
    # Build the examples dictionary dynamically.
    dynamic_examples = {
        name: obj
        for name, obj in globals().items()
        if name.startswith("example_") and callable(obj)
    }
    for example_name, example_fn in dynamic_examples.items():
        print(f"Running example '{example_name}':")
        example_fn(show=show)


if __name__ == "__main__":
    # Check whether we need to update the autogenerated imports.
    # If changes were made, re-execute the script.
    if update_imports_if_needed():
        os.execv(sys.executable, [sys.executable] + sys.argv)

    parser = argparse.ArgumentParser(description="Run example visualizations.")
    parser.add_argument(
        "--no_show", action="store_true", help="Disable figure display with plt.show()"
    )
    args = parser.parse_args()

    run_examples(show=not args.no_show)
